/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.13.0)", date = "2020-05-21")
public class Calculator {

  public interface Iface {

    public Result Sum(int firstDigit, int secondDigit) throws org.apache.thrift.TException;

    public Result Subtract(int firstDigit, int secondDigit) throws org.apache.thrift.TException;

    public Result Multiply(int firstDigit, int secondDigit) throws org.apache.thrift.TException;

    public Result Divide(int firstDigit, int secondDigit) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void Sum(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException;

    public void Subtract(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException;

    public void Multiply(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException;

    public void Divide(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public Result Sum(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      send_Sum(firstDigit, secondDigit);
      return recv_Sum();
    }

    public void send_Sum(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      Sum_args args = new Sum_args();
      args.setFirstDigit(firstDigit);
      args.setSecondDigit(secondDigit);
      sendBase("Sum", args);
    }

    public Result recv_Sum() throws org.apache.thrift.TException
    {
      Sum_result result = new Sum_result();
      receiveBase(result, "Sum");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Sum failed: unknown result");
    }

    public Result Subtract(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      send_Subtract(firstDigit, secondDigit);
      return recv_Subtract();
    }

    public void send_Subtract(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      Subtract_args args = new Subtract_args();
      args.setFirstDigit(firstDigit);
      args.setSecondDigit(secondDigit);
      sendBase("Subtract", args);
    }

    public Result recv_Subtract() throws org.apache.thrift.TException
    {
      Subtract_result result = new Subtract_result();
      receiveBase(result, "Subtract");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Subtract failed: unknown result");
    }

    public Result Multiply(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      send_Multiply(firstDigit, secondDigit);
      return recv_Multiply();
    }

    public void send_Multiply(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      Multiply_args args = new Multiply_args();
      args.setFirstDigit(firstDigit);
      args.setSecondDigit(secondDigit);
      sendBase("Multiply", args);
    }

    public Result recv_Multiply() throws org.apache.thrift.TException
    {
      Multiply_result result = new Multiply_result();
      receiveBase(result, "Multiply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Multiply failed: unknown result");
    }

    public Result Divide(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      send_Divide(firstDigit, secondDigit);
      return recv_Divide();
    }

    public void send_Divide(int firstDigit, int secondDigit) throws org.apache.thrift.TException
    {
      Divide_args args = new Divide_args();
      args.setFirstDigit(firstDigit);
      args.setSecondDigit(secondDigit);
      sendBase("Divide", args);
    }

    public Result recv_Divide() throws org.apache.thrift.TException
    {
      Divide_result result = new Divide_result();
      receiveBase(result, "Divide");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "Divide failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void Sum(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Sum_call method_call = new Sum_call(firstDigit, secondDigit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Sum_call extends org.apache.thrift.async.TAsyncMethodCall<Result> {
      private int firstDigit;
      private int secondDigit;
      public Sum_call(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstDigit = firstDigit;
        this.secondDigit = secondDigit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Sum", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Sum_args args = new Sum_args();
        args.setFirstDigit(firstDigit);
        args.setSecondDigit(secondDigit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Sum();
      }
    }

    public void Subtract(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Subtract_call method_call = new Subtract_call(firstDigit, secondDigit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Subtract_call extends org.apache.thrift.async.TAsyncMethodCall<Result> {
      private int firstDigit;
      private int secondDigit;
      public Subtract_call(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstDigit = firstDigit;
        this.secondDigit = secondDigit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Subtract", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Subtract_args args = new Subtract_args();
        args.setFirstDigit(firstDigit);
        args.setSecondDigit(secondDigit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Subtract();
      }
    }

    public void Multiply(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Multiply_call method_call = new Multiply_call(firstDigit, secondDigit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Multiply_call extends org.apache.thrift.async.TAsyncMethodCall<Result> {
      private int firstDigit;
      private int secondDigit;
      public Multiply_call(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstDigit = firstDigit;
        this.secondDigit = secondDigit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Multiply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Multiply_args args = new Multiply_args();
        args.setFirstDigit(firstDigit);
        args.setSecondDigit(secondDigit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Multiply();
      }
    }

    public void Divide(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Divide_call method_call = new Divide_call(firstDigit, secondDigit, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Divide_call extends org.apache.thrift.async.TAsyncMethodCall<Result> {
      private int firstDigit;
      private int secondDigit;
      public Divide_call(int firstDigit, int secondDigit, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.firstDigit = firstDigit;
        this.secondDigit = secondDigit;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Divide", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Divide_args args = new Divide_args();
        args.setFirstDigit(firstDigit);
        args.setSecondDigit(secondDigit);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Result getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_Divide();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("Sum", new Sum());
      processMap.put("Subtract", new Subtract());
      processMap.put("Multiply", new Multiply());
      processMap.put("Divide", new Divide());
      return processMap;
    }

    public static class Sum<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Sum_args> {
      public Sum() {
        super("Sum");
      }

      public Sum_args getEmptyArgsInstance() {
        return new Sum_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Sum_result getResult(I iface, Sum_args args) throws org.apache.thrift.TException {
        Sum_result result = new Sum_result();
        result.success = iface.Sum(args.firstDigit, args.secondDigit);
        return result;
      }
    }

    public static class Subtract<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Subtract_args> {
      public Subtract() {
        super("Subtract");
      }

      public Subtract_args getEmptyArgsInstance() {
        return new Subtract_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Subtract_result getResult(I iface, Subtract_args args) throws org.apache.thrift.TException {
        Subtract_result result = new Subtract_result();
        result.success = iface.Subtract(args.firstDigit, args.secondDigit);
        return result;
      }
    }

    public static class Multiply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Multiply_args> {
      public Multiply() {
        super("Multiply");
      }

      public Multiply_args getEmptyArgsInstance() {
        return new Multiply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Multiply_result getResult(I iface, Multiply_args args) throws org.apache.thrift.TException {
        Multiply_result result = new Multiply_result();
        result.success = iface.Multiply(args.firstDigit, args.secondDigit);
        return result;
      }
    }

    public static class Divide<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Divide_args> {
      public Divide() {
        super("Divide");
      }

      public Divide_args getEmptyArgsInstance() {
        return new Divide_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean rethrowUnhandledExceptions() {
        return false;
      }

      public Divide_result getResult(I iface, Divide_args args) throws org.apache.thrift.TException {
        Divide_result result = new Divide_result();
        result.success = iface.Divide(args.firstDigit, args.secondDigit);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("Sum", new Sum());
      processMap.put("Subtract", new Subtract());
      processMap.put("Multiply", new Multiply());
      processMap.put("Divide", new Divide());
      return processMap;
    }

    public static class Sum<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Sum_args, Result> {
      public Sum() {
        super("Sum");
      }

      public Sum_args getEmptyArgsInstance() {
        return new Sum_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Result> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            Sum_result result = new Sum_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Sum_result result = new Sum_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Sum_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
        iface.Sum(args.firstDigit, args.secondDigit,resultHandler);
      }
    }

    public static class Subtract<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Subtract_args, Result> {
      public Subtract() {
        super("Subtract");
      }

      public Subtract_args getEmptyArgsInstance() {
        return new Subtract_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Result> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            Subtract_result result = new Subtract_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Subtract_result result = new Subtract_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Subtract_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
        iface.Subtract(args.firstDigit, args.secondDigit,resultHandler);
      }
    }

    public static class Multiply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Multiply_args, Result> {
      public Multiply() {
        super("Multiply");
      }

      public Multiply_args getEmptyArgsInstance() {
        return new Multiply_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Result> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            Multiply_result result = new Multiply_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Multiply_result result = new Multiply_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Multiply_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
        iface.Multiply(args.firstDigit, args.secondDigit,resultHandler);
      }
    }

    public static class Divide<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Divide_args, Result> {
      public Divide() {
        super("Divide");
      }

      public Divide_args getEmptyArgsInstance() {
        return new Divide_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Result> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Result>() { 
          public void onComplete(Result o) {
            Divide_result result = new Divide_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            Divide_result result = new Divide_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Divide_args args, org.apache.thrift.async.AsyncMethodCallback<Result> resultHandler) throws org.apache.thrift.TException {
        iface.Divide(args.firstDigit, args.secondDigit,resultHandler);
      }
    }

  }

  public static class Sum_args implements org.apache.thrift.TBase<Sum_args, Sum_args._Fields>, java.io.Serializable, Cloneable, Comparable<Sum_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sum_args");

    private static final org.apache.thrift.protocol.TField FIRST_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstDigit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondDigit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sum_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sum_argsTupleSchemeFactory();

    public int firstDigit; // required
    public int secondDigit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_DIGIT((short)1, "firstDigit"),
      SECOND_DIGIT((short)2, "secondDigit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_DIGIT
            return FIRST_DIGIT;
          case 2: // SECOND_DIGIT
            return SECOND_DIGIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRSTDIGIT_ISSET_ID = 0;
    private static final int __SECONDDIGIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("firstDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECOND_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("secondDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sum_args.class, metaDataMap);
    }

    public Sum_args() {
    }

    public Sum_args(
      int firstDigit,
      int secondDigit)
    {
      this();
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sum_args(Sum_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.firstDigit = other.firstDigit;
      this.secondDigit = other.secondDigit;
    }

    public Sum_args deepCopy() {
      return new Sum_args(this);
    }

    @Override
    public void clear() {
      setFirstDigitIsSet(false);
      this.firstDigit = 0;
      setSecondDigitIsSet(false);
      this.secondDigit = 0;
    }

    public int getFirstDigit() {
      return this.firstDigit;
    }

    public Sum_args setFirstDigit(int firstDigit) {
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      return this;
    }

    public void unsetFirstDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    /** Returns true if field firstDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    public void setFirstDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID, value);
    }

    public int getSecondDigit() {
      return this.secondDigit;
    }

    public Sum_args setSecondDigit(int secondDigit) {
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
      return this;
    }

    public void unsetSecondDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    /** Returns true if field secondDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    public void setSecondDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRST_DIGIT:
        if (value == null) {
          unsetFirstDigit();
        } else {
          setFirstDigit((java.lang.Integer)value);
        }
        break;

      case SECOND_DIGIT:
        if (value == null) {
          unsetSecondDigit();
        } else {
          setSecondDigit((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_DIGIT:
        return getFirstDigit();

      case SECOND_DIGIT:
        return getSecondDigit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_DIGIT:
        return isSetFirstDigit();
      case SECOND_DIGIT:
        return isSetSecondDigit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Sum_args)
        return this.equals((Sum_args)that);
      return false;
    }

    public boolean equals(Sum_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstDigit = true;
      boolean that_present_firstDigit = true;
      if (this_present_firstDigit || that_present_firstDigit) {
        if (!(this_present_firstDigit && that_present_firstDigit))
          return false;
        if (this.firstDigit != that.firstDigit)
          return false;
      }

      boolean this_present_secondDigit = true;
      boolean that_present_secondDigit = true;
      if (this_present_secondDigit || that_present_secondDigit) {
        if (!(this_present_secondDigit && that_present_secondDigit))
          return false;
        if (this.secondDigit != that.secondDigit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + firstDigit;

      hashCode = hashCode * 8191 + secondDigit;

      return hashCode;
    }

    @Override
    public int compareTo(Sum_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstDigit()).compareTo(other.isSetFirstDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstDigit, other.firstDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondDigit()).compareTo(other.isSetSecondDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondDigit, other.secondDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Sum_args(");
      boolean first = true;

      sb.append("firstDigit:");
      sb.append(this.firstDigit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondDigit:");
      sb.append(this.secondDigit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sum_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sum_argsStandardScheme getScheme() {
        return new Sum_argsStandardScheme();
      }
    }

    private static class Sum_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sum_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstDigit = iprot.readI32();
                struct.setFirstDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondDigit = iprot.readI32();
                struct.setSecondDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sum_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FIRST_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.firstDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECOND_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.secondDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sum_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sum_argsTupleScheme getScheme() {
        return new Sum_argsTupleScheme();
      }
    }

    private static class Sum_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sum_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Sum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstDigit()) {
          optionals.set(0);
        }
        if (struct.isSetSecondDigit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstDigit()) {
          oprot.writeI32(struct.firstDigit);
        }
        if (struct.isSetSecondDigit()) {
          oprot.writeI32(struct.secondDigit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Sum_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstDigit = iprot.readI32();
          struct.setFirstDigitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondDigit = iprot.readI32();
          struct.setSecondDigitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Sum_result implements org.apache.thrift.TBase<Sum_result, Sum_result._Fields>, java.io.Serializable, Cloneable, Comparable<Sum_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Sum_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Sum_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Sum_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Sum_result.class, metaDataMap);
    }

    public Sum_result() {
    }

    public Sum_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Sum_result(Sum_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public Sum_result deepCopy() {
      return new Sum_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Result getSuccess() {
      return this.success;
    }

    public Sum_result setSuccess(@org.apache.thrift.annotation.Nullable Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Sum_result)
        return this.equals((Sum_result)that);
      return false;
    }

    public boolean equals(Sum_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Sum_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Sum_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Sum_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sum_resultStandardScheme getScheme() {
        return new Sum_resultStandardScheme();
      }
    }

    private static class Sum_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Sum_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Sum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Sum_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Sum_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Sum_resultTupleScheme getScheme() {
        return new Sum_resultTupleScheme();
      }
    }

    private static class Sum_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Sum_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Sum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Sum_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Subtract_args implements org.apache.thrift.TBase<Subtract_args, Subtract_args._Fields>, java.io.Serializable, Cloneable, Comparable<Subtract_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Subtract_args");

    private static final org.apache.thrift.protocol.TField FIRST_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstDigit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondDigit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Subtract_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Subtract_argsTupleSchemeFactory();

    public int firstDigit; // required
    public int secondDigit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_DIGIT((short)1, "firstDigit"),
      SECOND_DIGIT((short)2, "secondDigit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_DIGIT
            return FIRST_DIGIT;
          case 2: // SECOND_DIGIT
            return SECOND_DIGIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRSTDIGIT_ISSET_ID = 0;
    private static final int __SECONDDIGIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("firstDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECOND_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("secondDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Subtract_args.class, metaDataMap);
    }

    public Subtract_args() {
    }

    public Subtract_args(
      int firstDigit,
      int secondDigit)
    {
      this();
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Subtract_args(Subtract_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.firstDigit = other.firstDigit;
      this.secondDigit = other.secondDigit;
    }

    public Subtract_args deepCopy() {
      return new Subtract_args(this);
    }

    @Override
    public void clear() {
      setFirstDigitIsSet(false);
      this.firstDigit = 0;
      setSecondDigitIsSet(false);
      this.secondDigit = 0;
    }

    public int getFirstDigit() {
      return this.firstDigit;
    }

    public Subtract_args setFirstDigit(int firstDigit) {
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      return this;
    }

    public void unsetFirstDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    /** Returns true if field firstDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    public void setFirstDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID, value);
    }

    public int getSecondDigit() {
      return this.secondDigit;
    }

    public Subtract_args setSecondDigit(int secondDigit) {
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
      return this;
    }

    public void unsetSecondDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    /** Returns true if field secondDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    public void setSecondDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRST_DIGIT:
        if (value == null) {
          unsetFirstDigit();
        } else {
          setFirstDigit((java.lang.Integer)value);
        }
        break;

      case SECOND_DIGIT:
        if (value == null) {
          unsetSecondDigit();
        } else {
          setSecondDigit((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_DIGIT:
        return getFirstDigit();

      case SECOND_DIGIT:
        return getSecondDigit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_DIGIT:
        return isSetFirstDigit();
      case SECOND_DIGIT:
        return isSetSecondDigit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Subtract_args)
        return this.equals((Subtract_args)that);
      return false;
    }

    public boolean equals(Subtract_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstDigit = true;
      boolean that_present_firstDigit = true;
      if (this_present_firstDigit || that_present_firstDigit) {
        if (!(this_present_firstDigit && that_present_firstDigit))
          return false;
        if (this.firstDigit != that.firstDigit)
          return false;
      }

      boolean this_present_secondDigit = true;
      boolean that_present_secondDigit = true;
      if (this_present_secondDigit || that_present_secondDigit) {
        if (!(this_present_secondDigit && that_present_secondDigit))
          return false;
        if (this.secondDigit != that.secondDigit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + firstDigit;

      hashCode = hashCode * 8191 + secondDigit;

      return hashCode;
    }

    @Override
    public int compareTo(Subtract_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstDigit()).compareTo(other.isSetFirstDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstDigit, other.firstDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondDigit()).compareTo(other.isSetSecondDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondDigit, other.secondDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Subtract_args(");
      boolean first = true;

      sb.append("firstDigit:");
      sb.append(this.firstDigit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondDigit:");
      sb.append(this.secondDigit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Subtract_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Subtract_argsStandardScheme getScheme() {
        return new Subtract_argsStandardScheme();
      }
    }

    private static class Subtract_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Subtract_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Subtract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstDigit = iprot.readI32();
                struct.setFirstDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondDigit = iprot.readI32();
                struct.setSecondDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Subtract_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FIRST_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.firstDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECOND_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.secondDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Subtract_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Subtract_argsTupleScheme getScheme() {
        return new Subtract_argsTupleScheme();
      }
    }

    private static class Subtract_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Subtract_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Subtract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstDigit()) {
          optionals.set(0);
        }
        if (struct.isSetSecondDigit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstDigit()) {
          oprot.writeI32(struct.firstDigit);
        }
        if (struct.isSetSecondDigit()) {
          oprot.writeI32(struct.secondDigit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Subtract_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstDigit = iprot.readI32();
          struct.setFirstDigitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondDigit = iprot.readI32();
          struct.setSecondDigitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Subtract_result implements org.apache.thrift.TBase<Subtract_result, Subtract_result._Fields>, java.io.Serializable, Cloneable, Comparable<Subtract_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Subtract_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Subtract_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Subtract_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Subtract_result.class, metaDataMap);
    }

    public Subtract_result() {
    }

    public Subtract_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Subtract_result(Subtract_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public Subtract_result deepCopy() {
      return new Subtract_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Result getSuccess() {
      return this.success;
    }

    public Subtract_result setSuccess(@org.apache.thrift.annotation.Nullable Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Subtract_result)
        return this.equals((Subtract_result)that);
      return false;
    }

    public boolean equals(Subtract_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Subtract_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Subtract_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Subtract_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Subtract_resultStandardScheme getScheme() {
        return new Subtract_resultStandardScheme();
      }
    }

    private static class Subtract_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Subtract_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Subtract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Subtract_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Subtract_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Subtract_resultTupleScheme getScheme() {
        return new Subtract_resultTupleScheme();
      }
    }

    private static class Subtract_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Subtract_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Subtract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Subtract_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Multiply_args implements org.apache.thrift.TBase<Multiply_args, Multiply_args._Fields>, java.io.Serializable, Cloneable, Comparable<Multiply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Multiply_args");

    private static final org.apache.thrift.protocol.TField FIRST_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstDigit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondDigit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Multiply_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Multiply_argsTupleSchemeFactory();

    public int firstDigit; // required
    public int secondDigit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_DIGIT((short)1, "firstDigit"),
      SECOND_DIGIT((short)2, "secondDigit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_DIGIT
            return FIRST_DIGIT;
          case 2: // SECOND_DIGIT
            return SECOND_DIGIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRSTDIGIT_ISSET_ID = 0;
    private static final int __SECONDDIGIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("firstDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECOND_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("secondDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Multiply_args.class, metaDataMap);
    }

    public Multiply_args() {
    }

    public Multiply_args(
      int firstDigit,
      int secondDigit)
    {
      this();
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Multiply_args(Multiply_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.firstDigit = other.firstDigit;
      this.secondDigit = other.secondDigit;
    }

    public Multiply_args deepCopy() {
      return new Multiply_args(this);
    }

    @Override
    public void clear() {
      setFirstDigitIsSet(false);
      this.firstDigit = 0;
      setSecondDigitIsSet(false);
      this.secondDigit = 0;
    }

    public int getFirstDigit() {
      return this.firstDigit;
    }

    public Multiply_args setFirstDigit(int firstDigit) {
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      return this;
    }

    public void unsetFirstDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    /** Returns true if field firstDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    public void setFirstDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID, value);
    }

    public int getSecondDigit() {
      return this.secondDigit;
    }

    public Multiply_args setSecondDigit(int secondDigit) {
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
      return this;
    }

    public void unsetSecondDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    /** Returns true if field secondDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    public void setSecondDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRST_DIGIT:
        if (value == null) {
          unsetFirstDigit();
        } else {
          setFirstDigit((java.lang.Integer)value);
        }
        break;

      case SECOND_DIGIT:
        if (value == null) {
          unsetSecondDigit();
        } else {
          setSecondDigit((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_DIGIT:
        return getFirstDigit();

      case SECOND_DIGIT:
        return getSecondDigit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_DIGIT:
        return isSetFirstDigit();
      case SECOND_DIGIT:
        return isSetSecondDigit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Multiply_args)
        return this.equals((Multiply_args)that);
      return false;
    }

    public boolean equals(Multiply_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstDigit = true;
      boolean that_present_firstDigit = true;
      if (this_present_firstDigit || that_present_firstDigit) {
        if (!(this_present_firstDigit && that_present_firstDigit))
          return false;
        if (this.firstDigit != that.firstDigit)
          return false;
      }

      boolean this_present_secondDigit = true;
      boolean that_present_secondDigit = true;
      if (this_present_secondDigit || that_present_secondDigit) {
        if (!(this_present_secondDigit && that_present_secondDigit))
          return false;
        if (this.secondDigit != that.secondDigit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + firstDigit;

      hashCode = hashCode * 8191 + secondDigit;

      return hashCode;
    }

    @Override
    public int compareTo(Multiply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstDigit()).compareTo(other.isSetFirstDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstDigit, other.firstDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondDigit()).compareTo(other.isSetSecondDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondDigit, other.secondDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Multiply_args(");
      boolean first = true;

      sb.append("firstDigit:");
      sb.append(this.firstDigit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondDigit:");
      sb.append(this.secondDigit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Multiply_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiply_argsStandardScheme getScheme() {
        return new Multiply_argsStandardScheme();
      }
    }

    private static class Multiply_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Multiply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Multiply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstDigit = iprot.readI32();
                struct.setFirstDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondDigit = iprot.readI32();
                struct.setSecondDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Multiply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FIRST_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.firstDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECOND_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.secondDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Multiply_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiply_argsTupleScheme getScheme() {
        return new Multiply_argsTupleScheme();
      }
    }

    private static class Multiply_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Multiply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Multiply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstDigit()) {
          optionals.set(0);
        }
        if (struct.isSetSecondDigit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstDigit()) {
          oprot.writeI32(struct.firstDigit);
        }
        if (struct.isSetSecondDigit()) {
          oprot.writeI32(struct.secondDigit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Multiply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstDigit = iprot.readI32();
          struct.setFirstDigitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondDigit = iprot.readI32();
          struct.setSecondDigitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Multiply_result implements org.apache.thrift.TBase<Multiply_result, Multiply_result._Fields>, java.io.Serializable, Cloneable, Comparable<Multiply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Multiply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Multiply_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Multiply_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Multiply_result.class, metaDataMap);
    }

    public Multiply_result() {
    }

    public Multiply_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Multiply_result(Multiply_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public Multiply_result deepCopy() {
      return new Multiply_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Result getSuccess() {
      return this.success;
    }

    public Multiply_result setSuccess(@org.apache.thrift.annotation.Nullable Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Multiply_result)
        return this.equals((Multiply_result)that);
      return false;
    }

    public boolean equals(Multiply_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Multiply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Multiply_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Multiply_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiply_resultStandardScheme getScheme() {
        return new Multiply_resultStandardScheme();
      }
    }

    private static class Multiply_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Multiply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Multiply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Multiply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Multiply_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Multiply_resultTupleScheme getScheme() {
        return new Multiply_resultTupleScheme();
      }
    }

    private static class Multiply_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Multiply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Multiply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Multiply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Divide_args implements org.apache.thrift.TBase<Divide_args, Divide_args._Fields>, java.io.Serializable, Cloneable, Comparable<Divide_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Divide_args");

    private static final org.apache.thrift.protocol.TField FIRST_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("firstDigit", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SECOND_DIGIT_FIELD_DESC = new org.apache.thrift.protocol.TField("secondDigit", org.apache.thrift.protocol.TType.I32, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Divide_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Divide_argsTupleSchemeFactory();

    public int firstDigit; // required
    public int secondDigit; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FIRST_DIGIT((short)1, "firstDigit"),
      SECOND_DIGIT((short)2, "secondDigit");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FIRST_DIGIT
            return FIRST_DIGIT;
          case 2: // SECOND_DIGIT
            return SECOND_DIGIT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __FIRSTDIGIT_ISSET_ID = 0;
    private static final int __SECONDDIGIT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FIRST_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("firstDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SECOND_DIGIT, new org.apache.thrift.meta_data.FieldMetaData("secondDigit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Divide_args.class, metaDataMap);
    }

    public Divide_args() {
    }

    public Divide_args(
      int firstDigit,
      int secondDigit)
    {
      this();
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Divide_args(Divide_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.firstDigit = other.firstDigit;
      this.secondDigit = other.secondDigit;
    }

    public Divide_args deepCopy() {
      return new Divide_args(this);
    }

    @Override
    public void clear() {
      setFirstDigitIsSet(false);
      this.firstDigit = 0;
      setSecondDigitIsSet(false);
      this.secondDigit = 0;
    }

    public int getFirstDigit() {
      return this.firstDigit;
    }

    public Divide_args setFirstDigit(int firstDigit) {
      this.firstDigit = firstDigit;
      setFirstDigitIsSet(true);
      return this;
    }

    public void unsetFirstDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    /** Returns true if field firstDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetFirstDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID);
    }

    public void setFirstDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FIRSTDIGIT_ISSET_ID, value);
    }

    public int getSecondDigit() {
      return this.secondDigit;
    }

    public Divide_args setSecondDigit(int secondDigit) {
      this.secondDigit = secondDigit;
      setSecondDigitIsSet(true);
      return this;
    }

    public void unsetSecondDigit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    /** Returns true if field secondDigit is set (has been assigned a value) and false otherwise */
    public boolean isSetSecondDigit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID);
    }

    public void setSecondDigitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SECONDDIGIT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case FIRST_DIGIT:
        if (value == null) {
          unsetFirstDigit();
        } else {
          setFirstDigit((java.lang.Integer)value);
        }
        break;

      case SECOND_DIGIT:
        if (value == null) {
          unsetSecondDigit();
        } else {
          setSecondDigit((java.lang.Integer)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case FIRST_DIGIT:
        return getFirstDigit();

      case SECOND_DIGIT:
        return getSecondDigit();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case FIRST_DIGIT:
        return isSetFirstDigit();
      case SECOND_DIGIT:
        return isSetSecondDigit();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Divide_args)
        return this.equals((Divide_args)that);
      return false;
    }

    public boolean equals(Divide_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_firstDigit = true;
      boolean that_present_firstDigit = true;
      if (this_present_firstDigit || that_present_firstDigit) {
        if (!(this_present_firstDigit && that_present_firstDigit))
          return false;
        if (this.firstDigit != that.firstDigit)
          return false;
      }

      boolean this_present_secondDigit = true;
      boolean that_present_secondDigit = true;
      if (this_present_secondDigit || that_present_secondDigit) {
        if (!(this_present_secondDigit && that_present_secondDigit))
          return false;
        if (this.secondDigit != that.secondDigit)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + firstDigit;

      hashCode = hashCode * 8191 + secondDigit;

      return hashCode;
    }

    @Override
    public int compareTo(Divide_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetFirstDigit()).compareTo(other.isSetFirstDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFirstDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.firstDigit, other.firstDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSecondDigit()).compareTo(other.isSetSecondDigit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecondDigit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secondDigit, other.secondDigit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Divide_args(");
      boolean first = true;

      sb.append("firstDigit:");
      sb.append(this.firstDigit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("secondDigit:");
      sb.append(this.secondDigit);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Divide_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Divide_argsStandardScheme getScheme() {
        return new Divide_argsStandardScheme();
      }
    }

    private static class Divide_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<Divide_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Divide_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FIRST_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.firstDigit = iprot.readI32();
                struct.setFirstDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECOND_DIGIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.secondDigit = iprot.readI32();
                struct.setSecondDigitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Divide_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(FIRST_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.firstDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(SECOND_DIGIT_FIELD_DESC);
        oprot.writeI32(struct.secondDigit);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Divide_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Divide_argsTupleScheme getScheme() {
        return new Divide_argsTupleScheme();
      }
    }

    private static class Divide_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<Divide_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Divide_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetFirstDigit()) {
          optionals.set(0);
        }
        if (struct.isSetSecondDigit()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetFirstDigit()) {
          oprot.writeI32(struct.firstDigit);
        }
        if (struct.isSetSecondDigit()) {
          oprot.writeI32(struct.secondDigit);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Divide_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.firstDigit = iprot.readI32();
          struct.setFirstDigitIsSet(true);
        }
        if (incoming.get(1)) {
          struct.secondDigit = iprot.readI32();
          struct.setSecondDigitIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class Divide_result implements org.apache.thrift.TBase<Divide_result, Divide_result._Fields>, java.io.Serializable, Cloneable, Comparable<Divide_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Divide_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Divide_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Divide_resultTupleSchemeFactory();

    public @org.apache.thrift.annotation.Nullable Result success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      @org.apache.thrift.annotation.Nullable
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Result.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Divide_result.class, metaDataMap);
    }

    public Divide_result() {
    }

    public Divide_result(
      Result success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Divide_result(Divide_result other) {
      if (other.isSetSuccess()) {
        this.success = new Result(other.success);
      }
    }

    public Divide_result deepCopy() {
      return new Divide_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    @org.apache.thrift.annotation.Nullable
    public Result getSuccess() {
      return this.success;
    }

    public Divide_result setSuccess(@org.apache.thrift.annotation.Nullable Result success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Result)value);
        }
        break;

      }
    }

    @org.apache.thrift.annotation.Nullable
    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof Divide_result)
        return this.equals((Divide_result)that);
      return false;
    }

    public boolean equals(Divide_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(Divide_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    @org.apache.thrift.annotation.Nullable
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("Divide_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Divide_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Divide_resultStandardScheme getScheme() {
        return new Divide_resultStandardScheme();
      }
    }

    private static class Divide_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<Divide_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Divide_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Result();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Divide_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Divide_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public Divide_resultTupleScheme getScheme() {
        return new Divide_resultTupleScheme();
      }
    }

    private static class Divide_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<Divide_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Divide_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Divide_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Result();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
