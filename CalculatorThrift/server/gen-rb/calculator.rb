#
# Autogenerated by Thrift Compiler (0.13.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require 'calculator_types'

module Calculator
  class Client
    include ::Thrift::Client

    def Sum(firstDigit, secondDigit)
      send_Sum(firstDigit, secondDigit)
      return recv_Sum()
    end

    def send_Sum(firstDigit, secondDigit)
      send_message('Sum', Sum_args, :firstDigit => firstDigit, :secondDigit => secondDigit)
    end

    def recv_Sum()
      result = receive_message(Sum_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Sum failed: unknown result')
    end

    def Subtract(firstDigit, secondDigit)
      send_Subtract(firstDigit, secondDigit)
      return recv_Subtract()
    end

    def send_Subtract(firstDigit, secondDigit)
      send_message('Subtract', Subtract_args, :firstDigit => firstDigit, :secondDigit => secondDigit)
    end

    def recv_Subtract()
      result = receive_message(Subtract_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Subtract failed: unknown result')
    end

    def Multiply(firstDigit, secondDigit)
      send_Multiply(firstDigit, secondDigit)
      return recv_Multiply()
    end

    def send_Multiply(firstDigit, secondDigit)
      send_message('Multiply', Multiply_args, :firstDigit => firstDigit, :secondDigit => secondDigit)
    end

    def recv_Multiply()
      result = receive_message(Multiply_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Multiply failed: unknown result')
    end

    def Divide(firstDigit, secondDigit)
      send_Divide(firstDigit, secondDigit)
      return recv_Divide()
    end

    def send_Divide(firstDigit, secondDigit)
      send_message('Divide', Divide_args, :firstDigit => firstDigit, :secondDigit => secondDigit)
    end

    def recv_Divide()
      result = receive_message(Divide_result)
      return result.success unless result.success.nil?
      raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'Divide failed: unknown result')
    end

  end

  class Processor
    include ::Thrift::Processor

    def process_Sum(seqid, iprot, oprot)
      args = read_args(iprot, Sum_args)
      result = Sum_result.new()
      result.success = @handler.Sum(args.firstDigit, args.secondDigit)
      write_result(result, oprot, 'Sum', seqid)
    end

    def process_Subtract(seqid, iprot, oprot)
      args = read_args(iprot, Subtract_args)
      result = Subtract_result.new()
      result.success = @handler.Subtract(args.firstDigit, args.secondDigit)
      write_result(result, oprot, 'Subtract', seqid)
    end

    def process_Multiply(seqid, iprot, oprot)
      args = read_args(iprot, Multiply_args)
      result = Multiply_result.new()
      result.success = @handler.Multiply(args.firstDigit, args.secondDigit)
      write_result(result, oprot, 'Multiply', seqid)
    end

    def process_Divide(seqid, iprot, oprot)
      args = read_args(iprot, Divide_args)
      result = Divide_result.new()
      result.success = @handler.Divide(args.firstDigit, args.secondDigit)
      write_result(result, oprot, 'Divide', seqid)
    end

  end

  # HELPER FUNCTIONS AND STRUCTURES

  class Sum_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTDIGIT = 1
    SECONDDIGIT = 2

    FIELDS = {
      FIRSTDIGIT => {:type => ::Thrift::Types::I32, :name => 'firstDigit'},
      SECONDDIGIT => {:type => ::Thrift::Types::I32, :name => 'secondDigit'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Sum_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtract_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTDIGIT = 1
    SECONDDIGIT = 2

    FIELDS = {
      FIRSTDIGIT => {:type => ::Thrift::Types::I32, :name => 'firstDigit'},
      SECONDDIGIT => {:type => ::Thrift::Types::I32, :name => 'secondDigit'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Subtract_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiply_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTDIGIT = 1
    SECONDDIGIT = 2

    FIELDS = {
      FIRSTDIGIT => {:type => ::Thrift::Types::I32, :name => 'firstDigit'},
      SECONDDIGIT => {:type => ::Thrift::Types::I32, :name => 'secondDigit'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Multiply_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_args
    include ::Thrift::Struct, ::Thrift::Struct_Union
    FIRSTDIGIT = 1
    SECONDDIGIT = 2

    FIELDS = {
      FIRSTDIGIT => {:type => ::Thrift::Types::I32, :name => 'firstDigit'},
      SECONDDIGIT => {:type => ::Thrift::Types::I32, :name => 'secondDigit'}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

  class Divide_result
    include ::Thrift::Struct, ::Thrift::Struct_Union
    SUCCESS = 0

    FIELDS = {
      SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => ::Result}
    }

    def struct_fields; FIELDS; end

    def validate
    end

    ::Thrift::Struct.generate_accessors self
  end

end

